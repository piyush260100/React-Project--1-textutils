{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","about","onClick","toggleModeYellow","role","toggleModeGreen","toggleModeBlue","htmlFor","style","color","modeText","placeholder","TextForm","useState","text","setText","words","length","split","heading","backgroundColor","onChange","event","console","log","target","value","rows","newtext","toUpperCase","showAlert","toLowerCase","margin","cText","document","getElementById","select","navigator","clipboard","writeText","filter","word","join","Alert","alert","lower","charAt","slice","capitalize","msg","defaultProps","App","setMode","setModeText","setAlert","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.cfd8f638.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {Link} from 'react-router-dom'\r\n\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link\" href=\"/about\">{props.about}</a>\r\n            </li>\r\n\r\n          </ul>\r\n\r\n          <div className={`form-check form-switch mx-1 text-${props.mode}==='light'?dark:light`}>\r\n          <input className=\"form-check-input\" onClick={props.toggleModeYellow} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefaultyellow\"/> Yellow \r\n          \r\n          </div>\r\n\r\n          <div className={`form-check form-switch mx-1 text-${props.mode}==='light'?dark:light`}>\r\n            \r\n          <input className=\"form-check-input\" onClick={props.toggleModeGreen} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefaultgreen\"/> Green \r\n          </div>\r\n\r\n          <div className={`form-check form-switch mx-3 text-${props.mode}==='light'?dark:light`}>\r\n            \r\n            <input className=\"form-check-input\" onClick={props.toggleModeBlue} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefaultblue\" />\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\" style={{color: props.mode==='dark'?'white':'black'}}>{props.modeText}</label>\r\n          </div>\r\n          <form className=\"d-flex\">\r\n            <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n            <button className=\"btn btn-outline-primary\" type=\"submit\">Search</button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n\r\n  )\r\n}\r\n\r\n//setting proptypes here so that if we provided wrong proptype to the props then we get an error in the console.\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  about: PropTypes.string.isRequired\r\n};\r\n//isRequired is used to give user an error if we don't provide values to the props and no default value is set\r\n\r\n//Setting default props value if no prop value is provided in app.js we used these values\r\nNavbar.defaultProps = {\r\n  title: 'Set Title here',\r\n  about: \"About\",\r\n};","import React, {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n\r\n    //here text is a state variable which we can update using setText \r\n    const [text,setText]=useState('');\r\n    // text=\"new text\"; //Wrong way to chnage the state\r\n    // setText('new text'); //Correct way to chnage the state\r\n\r\n    const handleUpClick=()=>{\r\n\r\n        console.log(\"Convert to Uppercase clicked\");\r\n        let newtext = text.toUpperCase();\r\n        setText(newtext);\r\n        text!=\"\"?props.showAlert(\": Converted to Uppercase\",\"success\"):props.showAlert(\": Write something\",\"warning\");\r\n    }\r\n\r\n    const handleOnChange=(event)=>{\r\n        console.log(\"Handle on change\");\r\n        setText(event.target.value)\r\n    }\r\n\r\n    const handleLowerClick=()=>{\r\n        console.log(\"Convert to Lowercase clicked\");\r\n        let newtext = text.toLowerCase();\r\n        setText(newtext);\r\n        text!=\"\"?props.showAlert(\": Converted to Lowercase\",\"success\"):props.showAlert(\": Write something\",\"warning\");\r\n    }\r\n\r\n    const handleClear=()=>{\r\n        console.log(\"Clear the Text\");\r\n        setText(\"\");\r\n        text!=\"\"?props.showAlert(\": Text has been Cleared\",\"success\"):props.showAlert(\": Nothing to Clear\",\"warning\");        \r\n    }\r\n\r\n    const handleCopy=()=>{\r\n        console.log(\"Copy the text\");\r\n        let cText=document.getElementById('exampleFormControlTextarea1');\r\n        cText.select();\r\n        navigator.clipboard.writeText(cText.value);\r\n        text!=\"\"?props.showAlert(\": Copied to the dashboard\",\"success\"):props.showAlert(\": Write something\",\"warning\");\r\n    }\r\n\r\n    const handleExtraSpaces=(event)=>{\r\n        console.log(\"Remove Extra spaces\");\r\n        setText(text.split(' ').filter(word => word).join(' '));\r\n        text!=\"\"?props.showAlert(\": Extra spaces has been removed\",\"success\"):props.showAlert(\": Write something\",\"warning\");\r\n\r\n    }\r\n\r\n    let words=0;\r\n    if(text.length===0){\r\n        words=0\r\n    }\r\n\r\n    else{\r\n        words=(text.split(\" \").length);\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container\">\r\n            <h1 style={{color: props.mode==='dark'?'white':'black'}}>{props.heading}</h1>\r\n            <div className=\"mb-2\">\r\n                \r\n                <textarea className=\"form-control\" id=\"exampleFormControlTextarea1\" style={{backgroundColor: props.mode==='dark'?'#b1a7a7':'White',color: props.mode==='dark'?'red':'black'}} onChange={handleOnChange} rows=\"10\" value={text} ></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n            <button className=\"btn btn-primary\" onClick={handleLowerClick} style={{margin: \"0px 16px\"}}>Convert to Lowercase</button>\r\n            <button className=\"btn btn-primary\" onClick={handleClear} style={{margin: \"0px\"}}>Clear Text</button>\r\n            <button className=\"btn btn-primary\" onClick={handleCopy} style={{margin: \"0px 12px\"}}>Copy Text</button>\r\n            <button className=\"btn btn-primary\" onClick={handleExtraSpaces} style={{margin: \"0px 4px\"}}>Remove Extra Spaces</button>\r\n\r\n            </div>\r\n          \r\n            <div className=\"container my-3\">\r\n                <h2 style={{color: props.mode==='dark'?'white':'black'}}>Your Text Summary</h2>\r\n                <p style={{color: props.mode==='dark'?'white':'black'}}>{words} words, {text.length} characters</p>\r\n                <p style={{color: props.mode==='dark'?'white':'black'}}>Reading Time : {0.008 * words} minutes</p>\r\n            </div>\r\n\r\n            <h2 className='mx-3' style={{color: props.mode==='dark'?'white':'black'}}>Preview</h2>\r\n            <p className='mx-3' style={{color: props.mode==='dark'?'white':'black'}}>{text.length>0?text:\"Enter something to preview over here\"}</p>\r\n\r\n\r\n        </>\r\n    )\r\n}\r\n\r\n// TextForm.propTypes={\r\n//     heading : PropTypes.string, \r\n// };\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n\r\n    const capitalize=(word)=>{\r\n        const lower =word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n\r\n    return (\r\n\r\n           props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                <strong>{capitalize(props.alert.type)}</strong>  {props.alert.msg}\r\n            </div>\r\n\r\n        \r\n    )\r\n}\r\n","// import logo from './logo.svg';\nimport './App2.css';\nimport { Fragment, useState } from 'react';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport About from './components/About';\nimport React from 'react'\nimport Alert from './components/Alert';\n// import react router\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n//   Link,\n//   Routes\n// } from \"react-router-dom\";\n\n\n// let name=\"Piyush7\";\nfunction App() {\n\n  const [mode, setMode] = useState('light');  //which mode is enable\n\n  const [modeText, setModeText] = useState('Enable Light Mode');\n\n  const [alert, setAlert] = useState(null);\n\n  // const [theme,setTheme] =useState('light');\n\n  const showAlert = (msg, type) => {\n    setAlert({\n      msg: msg,\n      type: type,\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 2000);\n\n  }\n\n  const toggleModeBlue = () => {\n    console.log('toggle Mode');\n    if (mode === 'light') {\n      setMode('dark');\n      setModeText('Enable Light Mode');\n      document.body.style.backgroundColor = \"#09283E\";\n      showAlert(\": Blue Mode has been enabled\", \"success\");\n      document.title = \"TextUtils - Home Blue Mode\";\n\n    }\n    else {\n      setMode('light');\n      setModeText('Enable Dark Mode');\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\": Light Mode has been enabled\", \"success\");\n      document.title = \"TextUtils - Home Light Mode\";\n    }\n  }\n\n  const toggleModeGreen = () => {\n    console.log('toggle Mode');\n    if (mode === 'light') {\n      setMode('dark');\n      setModeText('Enable Light Mode');\n      document.body.style.backgroundColor = \"#2a7908\";\n      showAlert(\": Green Mode has been enabled\", \"success\");\n      document.title = \"TextUtils - Home Green Mode\";\n\n    }\n    else {\n      setMode('light');\n      setModeText('Enable Dark Mode');\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\": Light Mode has been enabled\", \"success\");\n      document.title = \"TextUtils - Home Light Mode\";\n    }\n  }\n\n\n  const toggleModeYellow = () => {\n    console.log('toggle Mode');\n    if (mode === 'light') {\n      setMode('dark');\n      setModeText('Enable Light Mode');\n      document.body.style.backgroundColor = \"#e4b31f\";\n      showAlert(\": Yellow Mode has been enabled\", \"success\");\n      document.title = \"TextUtils - Home Yellow Mode\";\n\n    }\n    else {\n      setMode('light');\n      setModeText('Enable Dark Mode');\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\": Light Mode has been enabled\", \"success\");\n      document.title = \"TextUtils - Home Light Mode\";\n    }\n  }\n\n\n\n  return (\n\n    //JSX stands for JavaScript XML. JSX allows us to write HTML in React. JSX makes it easier to write and add HTML in React.\n    // we can't return two html tag from a single return statement.\n    // <h1>Hi, This is me!</h1> causes error\n    // but inside jsx Fragment we can put more than one tag together.\n    //Starting JSX Fragment\n    <>\n\n      {/* <Navbar title=\"TextUtils\" contact=\"Contact Us\"/> */}\n      {/* <Navbar/> */}\n      {/* <Router> */}\n        <Navbar title=\"TextUtils\" mode={mode} toggleModeBlue={toggleModeBlue} toggleModeGreen={toggleModeGreen} toggleModeYellow={toggleModeYellow} modeText={modeText} />\n        <Alert alert={alert}></Alert>\n        <div className=\"container my-3\">\n          {/* <Routes> */}\n            {/* <Route exact path=\"/about\" element={<About/>}> */}\n            {/* </Route> */}\n            {/* <Route exact path=\"/\" element={<TextForm heading=\"Enter the Text to Analyze\" mode={mode} showAlert={showAlert}></TextForm>}> */}\n            {/* </Route> */}\n          {/* </Routes> */}\n\n          <TextForm heading=\"Enter the Text to Analyze\" mode={mode} showAlert={showAlert}></TextForm>\n        </div>\n      {/* </Router> */}\n\n\n    </>\n    // Ending JSX Fragment\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}